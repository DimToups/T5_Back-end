// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AnswerType {
  TEXT
  IMAGE
  SOUND

  @@map("answer_type")
}

enum Difficulties {
  EASY
  MEDIUM
  HARD

  @@map("difficulties")
}

enum Categories {
  GENERAL_KNOWLEDGE
  ENTERTAINMENT_BOOKS
  ENTERTAINMENT_FILM
  ENTERTAINMENT_MUSIC
  ENTERTAINMENT_MUSICALS_AND_THEATRES
  ENTERTAINMENT_TELEVISION
  ENTERTAINMENT_VIDEO_GAMES
  ENTERTAINMENT_BOARD_GAMES
  SCIENCE_AND_NATURE
  SCIENCE_COMPUTERS
  SCIENCE_MATHEMATICS
  MYTHOLOGY
  SPORTS
  GEOGRAPHY
  HISTORY
  POLITICS
  ART
  CELEBRITIES
  ANIMALS
  VEHICLES
  ENTERTAINMENT_COMICS
  SCIENCE_GADGETS
  ENTERTAINMENT_JAPANESE_ANIME_AND_MANGA
  ENTERTAINMENT_CARTOON_AND_ANIMATIONS

  @@map("categories")
}

enum GameModes {
  SINGLEPLAYER // Normal mode
  TIME_EASY
  TIME_MEDIUM
  TIME_HARD
  MULTIPLAYER
  TEAM_EASY
  TEAM_MEDIUM
  TEAM_HARD

  @@map("game_modes")
}

model Users {
  id           String        @id
  username     String        @unique
  email        String        @unique
  password     String
  sessions     Sessions[]
  quiz         Quiz[]
  games        Games[]
  questions    Questions[]
  room_players RoomPlayers[]

  @@map("users")
}

model Sessions {
  id        String   @id
  user_id   String
  user      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expire_at DateTime

  @@map("sessions")
}

model Quiz {
  id             String          @id
  title          String
  description    String?
  difficulty     Difficulties?
  category       Categories?
  published      Boolean         @default(false)
  quick_game     Boolean         @default(false)
  user_id        String?
  user           Users?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  games          Games[]
  quiz_questions QuizQuestions[]
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt

  @@map("quiz")
}

model Games {
  id               String              @id
  mode             GameModes           @default(SINGLEPLAYER)
  quiz_id          String
  quiz             Quiz                @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  current_question Int                 @default(0)
  score            Int                 @default(0)
  user_id          String?
  code             String              @unique
  user             Users?              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
  ended_at         DateTime?
  answers          StatisticsAnswers[]
  room             Rooms?

  @@map("games")
}

model Questions {
  sum                String              @id
  question           String
  difficulty         Difficulties?
  category           Categories?
  answers            Answers[]
  user_id            String?
  user               Users?              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  quiz_questions     QuizQuestions[]
  statistics_answers StatisticsAnswers[]

  @@map("questions")
}

model Answers {
  id             String     @id
  question_sum   String
  question       Questions  @relation(fields: [question_sum], references: [sum], onDelete: Cascade)
  correct        Boolean
  type           AnswerType
  answer_content String // text or {image, image} path
  created_at     DateTime   @default(now())

  @@map("answers")
}

model QuizQuestions {
  quiz_id     String
  quiz        Quiz      @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  question_id String
  question    Questions @relation(fields: [question_id], references: [sum], onDelete: Cascade)
  position    Int

  @@id([quiz_id, question_id])
  @@map("quiz_questions")
}

model StatisticsAnswers {
  game_id      String
  game         Games     @relation(fields: [game_id], references: [id], onDelete: Cascade)
  question_sum String
  question     Questions @relation(fields: [question_sum], references: [sum], onDelete: Cascade)
  correct      Boolean
  empty        Boolean
  created_at   DateTime  @default(now())

  @@id([game_id, question_sum])
  @@map("statistics_answers")
}

model Rooms {
  game_id      String        @id
  game         Games         @relation(fields: [game_id], references: [id], onDelete: Cascade)
  started_at   DateTime?
  max_players  Int?
  room_players RoomPlayers[]
  teams        Teams[]

  @@map("rooms")
}

model RoomPlayers {
  id       String  @id
  user_id  String?
  user     Users?  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  username String?
  room_id  String
  room     Rooms   @relation(fields: [room_id], references: [game_id], onDelete: Cascade)
  owner    Boolean @default(false)
  team_id  String?
  team     Teams?  @relation(fields: [team_id], references: [id], onDelete: Cascade)

  @@map("room_players")
}

model Teams {
  id           String        @id
  name         String
  room_id      String
  room         Rooms         @relation(fields: [room_id], references: [game_id], onDelete: Cascade)
  room_players RoomPlayers[]

  @@map("teams")
}
